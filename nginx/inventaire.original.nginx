# PROJECT_ROOT, DOMAIN_NAME and PRERENDER_INSTANCE are set during nginx setup script

server_tokens off;

# Defining a log format arbitrary named "custom"
# doc: http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format
log_format custom '$remote_addr - $remote_user "$request" $status'
                  ' | time: $request_time'
                  ' | length: req $request_length / res $body_bytes_sent'
                  ' | agent: $http_user_agent'
                  ' | referer: $http_referer'
                  ' | gzip ratio: $gzip_ratio';

# Access logs from journalctl
access_log syslog:server=unix:/dev/log custom;
error_log syslog:server=unix:/dev/log;

upstream inventaire {
    server 127.0.0.1:3006 fail_timeout=5s;
    server 127.0.0.1:3007 backup;
}

server {
    # source: https://www.nginx.com/blog/nginx-1-9-5/
    listen 80;
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen              443 ssl http2;
    server_name         DOMAIN_NAME www.DOMAIN_NAME;

    # 'ssl_certificate' and 'ssl_certificate_key' will be added
    # by LetsEncrypt certbot

    ## source: https://mozilla.github.io/server-side-tls/ssl-config-generator/
    ssl_prefer_server_ciphers on;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_timeout 5m;
    ssl_session_cache   shared:SSL:50m;
    ssl_session_tickets off;
    ssl_dhparam         PROJECT_ROOT/nginx/dhparam.pem;
    ssl_ciphers         'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_stapling        on;
    ssl_stapling_verify on;

    # source: https://scotthelme.co.uk/hardening-your-http-response-headers/#x-content-type-options
    add_header X-Content-Type-Options 'nosniff' always;

    # source: https://scotthelme.co.uk/a-new-security-header-referrer-policy/
    add_header Referrer-Policy 'no-referrer-when-downgrade' always;

    client_max_body_size 5M;

    # As long as no secret/sensible data are passed in the body, the BREACH exploit on TLS+compression shouldn't be a concern. Right?
    # https://en.wikipedia.org/wiki/BREACH_(security_exploit)#Mitigation
    # http://security.stackexchange.com/questions/39925/breach-a-new-attack-against-http-what-can-be-done
    # It could be that it was solved by HTTP/2 \o/ https://blog.cloudflare.com/hpack-the-silent-killer-feature-of-http-2
    gzip on;
    gzip_types *;

    # On-The-Fly Image Resizer

    # URLs look like /img/users/300x1200/8185d4e039f52b4faa06a1c277133e9a8232551b
    # for locally hosted images
    # or /img/remote/300x1200/630022006?href=http%3A%2F%2Fescaped.url
    # for remote images, with 630022006 being the hash of the passed href
    # generated by [hashCode](https://github.com/inventaire/inventaire-client/blob/71fb4e0/app/lib/shared/utils.coffee#L3-L12)

    # The hack: I couldn't make the proxy_store work: it never hits the cache, but
    # it does put the resized images in /tmp/nginx/resize, so using a try_files
    # directive instead

    location ~ ^/img/(users|entities|remote|assets)/(\d+)x(\d+)/(.*) {
       root /tmp/nginx/resize;
       default_type "image/jpeg";
       add_header Cache-Control "immutable";
       add_header X-File-Cache "hit";
       try_files $uri @invimg;
       limit_except GET {
           deny  all;
       }
    }

    location ~ ^/img/(\d+)x(\d+)/(.*) {
        return 404;
    }

    # Serving full definition images
    location /img {
      add_header Cache-Control "immutable";
      proxy_pass http://inventaire;
      limit_except GET {
          deny  all;
      }
    }

    location @invimg {
      default_type "image/jpeg";
      add_header Cache-Control "immutable";
      add_header X-File-Cache "miss";
      proxy_temp_path      /tmp/nginx/tmp;
      proxy_store          /tmp/nginx/resize/$uri;
      proxy_store_access   user:rw  group:rw  all:r;
      proxy_http_version 1.1;
      proxy_pass http://inventaire;
    }

    # following aliases made in order to respect the url structure
    # the server alone would follow: especially, mounting /static on /public
    root  PROJECT_ROOT/inventaire/client;
    location /public/ {
        limit_except GET {
            deny  all;
        }
        gzip_static on;
        # Let resources that can't be cache busted
        # - such as opensearch.xml or robots.txt -
        # out of this caching policy
        if ($uri ~ "^/public/(js|css|fonts|i18n)/" ) {
            add_header Cache-Control "immutable";
            # All headers that aren't in the last block won't be taken in account
            # thus the need to have CORS headers here too
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET' always;
        }
    }

    # Pass the request to the node.js server
    # with some correct headers for proxy-awareness
    location /api {
        # Let the server decide when CORS headers should be added

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        # Increasing timeout to let the time to long request (mostly admin requests) to proceed
        # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_read_timeout
        proxy_read_timeout 600;
        proxy_redirect off;

        # Redirect Prerender API requests to their the alt server
        if ($remote_addr = PRERENDER_IP) {
            proxy_pass http://127.0.0.1:3007;
            break;
        }

        proxy_pass http://inventaire;

        # Handle Web Socket connections
        # proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection "upgrade";
    }

    # Let the API server handle all but /public JSON requests
    location ~ "^/[^p].*\.json" {
        limit_except GET {
            deny  all;
        }
        # Same as /api, couldn't find a proper way to DRY it
        # The 'include' strategy (http://stackoverflow.com/a/35375548/3324977)
        # failed as Nginx rejected the proxy directives at this place
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_pass http://inventaire;
        proxy_redirect off;
    }

    location = /favicon.ico {
        try_files /public/$uri /public/images/$uri;
        expires 30d;
        add_header Cache-Control "public";
    }

    location = /robots.txt {
        gzip_static on;
        try_files /public/$uri /$uri;
        expires 1d;
        add_header Cache-Control "public";
    }

    # Prevent exposing git folders such as /public/i18n/.git
    # For why this rule takes precedence over location /public/
    # see http://stackoverflow.com/a/34262192/3324977
    location ~ /\.git {
        deny all;
    }

    location / {
        gzip_static on;
        try_files $uri @prerender;
    }

    # Dispatching requests between the JS-rendered client (for browsers)
    # or the prerendered version (for bots, curl and alikes)
    # To setup a Prerender server, see https://github.com/inventaire/prerender

    # Adapted from https://gist.github.com/thoop/8165802
    location @prerender {
        #proxy_set_header X-Prerender-Token YOUR_TOKEN;

        set $prerender 0;
        if ($http_user_agent ~* "bot|index|spider|crawl|facebookexternalhit|embedly|quora link preview|outbrain|pinterest|vkShare|W3C_Validator|curl|wget|slurp|Twitterbot") {
            set $prerender 1;
        }
        if ($args ~ "_escaped_fragment_") {
            set $prerender 1;
        }
        if ($http_user_agent ~ "Prerender") {
            set $prerender 0;
        }
        if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
            set $prerender 0;
        }

        if ($prerender = 1) {
            #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
            # set $prerender "92.222.76.42:3000";
            rewrite .* /$scheme://$host$request_uri? break;
            proxy_pass PRERENDER_INSTANCE;
        }
        if ($prerender = 0) {
            # source: https://gist.github.com/plentz/6737338
            add_header X-XSS-Protection "1; mode=block; report=/api/reports?action=csp-report;" always;
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header Strict-Transport-Security "max-age=31536000;" always;

            # Keep in sync with server/middlewares/security.coffee@inventaire/inventaire
            set $csp "default-src 'self' www.wikidata.org; child-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; font-src 'self'; img-src 'self' https://commons.wikimedia.org https://api.tiles.mapbox.com https://piwik.allmende.io data:; report-uri /api/reports?action=csp-report;";
            add_header Content-Security-Policy $csp; # Standard
            add_header X-Content-Security-Policy $csp; # Firefox <23 & IE 10, 11
            add_header X-WebKit-CSP $csp; # Safari <7 and Chrome <25

            # index.html should always be fresh out of the server
            # time is negative => “Cache-Control: no-cache”
            # http://nginx.org/en/docs/http/ngx_http_headers_module.html
            # Those headers should be set here and not at "location /" as they would be ignored (cf http://serverfault.com/a/786248)
            expires -1;

            rewrite .* /public/index.html break;
        }
    }
}
